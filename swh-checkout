#!/usr/bin/env -S guix repl --
!#

;;; swh-checkout: check out a single commit from a git repository,
;;; using SWH as a backup data source.

;;; swh-checkout is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.

;;; Copyright Â© 2023 Konrad Hinsen <konrad.hinsen@cnrs.fr>

(use-modules (ice-9 getopt-long)
             (web uri)
             (srfi srfi-11)
             ((guix swh)          #:select (swh-download commit-id?))
             ((guix build git)    #:select (git-fetch)))

;; swh-download-archive is not exported by (guix swh)
(define swh-download-archive (@@ (guix swh) swh-download-archive))

;; The core functionality: given the URL of a Git repository and a
;; commit hash, check out the corresponding worktree to a
;; directory. First access the Git repository directly, and if this
;; fails, download from SWH.

(define (checkout-from-url-and-commit url commit directory-name)
  (or (git-fetch url commit directory-name)
      (swh-download url commit directory-name)))

;; Extract various information from a SWHID:
;;  - the hash (as a string)
;;  - the optional attributes (as an alist)

(define (swhid-hash swhid)
  (list-ref (string-split (car (string-split swhid #\;)) #\:) 3))

(define (swhid-attributes swhid)
  (define (parse-attribute attribute-string)
    (let ((parts (string-split attribute-string #\=)))
      (cons (string->symbol (car parts))
            (cadr parts))))
  (map parse-attribute (cdr (string-split swhid #\;))))

;; Extract the origin URL and the commit hash from the optional
;; attributes of a SWHID of type "rev".

(define (url-and-commit-from-rev-swhid swhid)
  (let ((attributes (swhid-attributes swhid)))
    (unless (assoc 'origin attributes)
      (throw 'swhid-error
       (format #f "SWHID missing origin attribute: ~a~%" swhid)))
    (values (cdr (assoc 'origin attributes))
            (swhid-hash swhid))))

;; Extract the origin URL and the commit hash from the optional
;; attributes of a SWHID of type "dir".

(define (url-and-commit-from-dir-swhid swhid)
  (let ((attributes (swhid-attributes swhid)))
    (unless (assoc 'anchor attributes)
      (throw 'swhid-error
       (format #f "SWHID missing anchor attribute: ~a~%" swhid)))
    (unless (assoc 'origin attributes)
      (throw 'swhid-error
       (format #f "SWHID missing origin attribute: ~a~%" swhid)))
    (url-and-commit-from-rev-swhid 
     (string-append (cdr (assoc 'anchor attributes))
                    ";origin="
                    (cdr (assoc 'origin attributes))))))

;; Extract the origin URL and the commit hash from the optional
;; attributes of a SWHID. Fail for a "snp"-type SWHID, which lacks
;; the required attributes.

(define (url-and-commit-from-swhid swhid)
  (let ((swhid-type (substring swhid 6 9)))
    (if (string= swhid-type "rev")
        (url-and-commit-from-rev-swhid swhid)
        (if (string= swhid-type "dir")
            (url-and-commit-from-dir-swhid swhid)
            (values #f #f)))))

;; Validate the command-line arguments. The tests are very basic and
;; supposed to catch only the most specific problems.

(define (validate-commit string)
  (unless (commit-id? string)
    (format (current-error-port)
            "not a full SHA1: ~a~%" string)
    (exit 1)))

(define (validate-url string)
  (unless (or (string-prefix? "http://" string)
              (string-prefix? "https://" string))
    (format (current-error-port)
            "not a valid http(s) URL: ~a~%" string)
    (exit 1)))

(define (validate-swhid string)
  (unless (string-prefix? "swh:1:" string)
    (format (current-error-port)
            "not a SWHID V1: ~a~%" string)
    (exit 1))
  (let ((swhid-type (substring string 6 9)))
    (unless (or (string= "dir" swhid-type)
                (string= "rev" swhid-type))
      (format (current-error-port)
              "SWHID must be of type 'dir' or 'rev'~%")
      (exit 1))))

(define (validate-directory string)
  (when (file-exists? string)
    (format (current-error-port)
            "directory already exists: ~a~%" string)
    (exit 1)))

(define (directory-name-from-url url)
  (car
   (last-pair
    (split-and-decode-uri-path
     (uri-path
      (string->uri
       url))))))

;; Parse the command line arguments and perform the checkout.

(define (main args)
  (let* ((option-spec
          '((help      (single-char #\h) (value #f))
            (url       (single-char #\u) (value #t))
            (commit    (single-char #\c) (value #t))
            (swhid     (single-char #\s) (value #t))
            (directory (single-char #\d) (value #t))))
         (options (getopt-long args option-spec))
         (help-wanted (option-ref options 'help #f))
         (url (option-ref options 'url #f))
         (commit (option-ref options 'commit #f))
         (swhid (option-ref options 'swhid #f))
         (directory (option-ref options 'directory #f)))
    (if help-wanted
        (display "\
swh-checkout [options]
  -h, --help       Display this help
  -u, --url        URL for git repository (http or https)
  -c, --commit     Git commit (full 40-character SHA-1)
  -s, --swhid      SWHID (revision or directory, with contextual information)
  -d, --directory  Directory in which the files are placed (default: derived from URL)

Use either swhid or url plus commit, not both.
")
        (begin
          (when url
            (validate-url url))
          (when commit
            (validate-commit commit))
          (when directory
            (validate-directory directory))
          (if swhid
              (begin
                (validate-swhid swhid)
                (when (or url commit)
                  (format (current-error-port)
                          "provide EITHER a swhid OR a url/commit combination~%")
                  (exit 1))
                (catch 'swhid-error
                  (lambda ()
                    (let-values (((url commit) (url-and-commit-from-swhid swhid)))
                      (unless directory
                        (set! directory (directory-name-from-url url))
                        (validate-directory directory))
                      (checkout-from-url-and-commit url commit directory)))
                  (lambda (key . args)
                    (unless directory
                      (display "No directory specified and no URL In SWHID"
                               (current-error-port))
                      (exit 1))
                    (let ((swhid-type (substring swhid 6 9)))
                      (if (string= swhid-type "dir")
                          (swh-download-archive swhid directory
                                                #:archive-type 'flat)
                          (swh-download-archive swhid directory
                                                #:archive-type 'git-bare))))))
              (begin
                (if (and url commit)
                    (begin
                      (unless directory
                        (set! directory (directory-name-from-url url))
                        (validate-directory directory))
                      (checkout-from-url-and-commit url commit directory))
                    (begin
                      (format (current-error-port)
                              "BOTH url and commit are required~%")
                      (exit 1)))))
          (exit 0)))))

(main (command-line))
